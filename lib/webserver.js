// Generated by CoffeeScript 1.4.0
(function() {
  var User, WebServer, async, config, express, fs, generate_identity, http, identity, logger, plist, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs.extra');

  express = require('express');

  http = require('http');

  plist = require('plist');

  async = require('async');

  require('pkginfo')(module, 'name', 'version');

  config = require('nconf');

  logger = require('./logger');

  _ref = require('./identity'), identity = _ref.identity, generate_identity = _ref.generate_identity;

  User = require('./models/user');

  /*
  The iOS-ota webserver class.
  */


  WebServer = (function() {

    function WebServer() {
      this.setup_routing = __bind(this.setup_routing, this);      this.app = express();
      this.app.configure;
      this.app.use(express.bodyParser({
        uploadDir: '/tmp',
        keepExtensions: false
      }));
      this.app.use(errorHandler);
      this.setup_routing();
      this.srv = http.createServer(this.app);
      this.srv.listen(config.get('port'));
      logger.info("Webserver is up at: http://0.0.0.0:" + (config.get('port')));
    }

    WebServer.prototype.setup_routing = function() {
      var _this = this;
      this.app.get('/', function(req, res, next) {
        return res.json(200, {
          name: exports.name,
          version: exports.version
        });
      });
      this.app.get('/help', function(req, res, next) {
        return res.json(200, {
          message: "restdown docs coming soon."
        });
      });
      this.app.get('/favicon.ico', function(req, res, next) {
        return res.json(404, "No favicon exists.");
      });
      this.app.get('/users', function(req, res, next) {
        var user;
        user = new User;
        return user.list(function(err, userlist) {
          if (err) {
            res.json(500, "Error retrieving user list.");
          }
          return res.json(200, {
            users: userlist
          });
        });
      });
      this.app.post('/users/:user', function(req, res, next) {
        var handle_auth_response, user;
        user = req.params.user;
        handle_auth_response = function(err, reply) {
          if (err) {
            if (err.code === "UserDoesNotExist") {
              res.json(401, {
                code: 401,
                message: err.message
              });
            }
            if (err.code === "InvalidPassword") {
              res.json(401, {
                code: 401,
                message: "Unauthorized: Invalid authentication secret."
              });
            } else {
              res.json(500, {
                code: 500,
                message: reply.message
              });
            }
          }
          if (user.username === "admin") {
            res.json(403, {
              code: 403,
              message: "Unable to modify the administrative user."
            });
          }
          if (!reply.admin) {
            res.json(401, {
              code: 401,
              message: "Only administrators are permitted to modify accounts."
            });
          }
          user = new User({
            name: req.params.user
          });
          return user.save(function(err, reply) {
            return res.json(200, reply);
          });
        };
        return _this.authenticate_with_self_admin(req, handle_auth_response, user);
      });
      return this.app.get('/:user', function(req, res, next) {
        var location, user, username;
        username = req.params.user;
        location = username;
        user = new User({
          name: username
        });
        return user.exists(username, function(err, user_resp) {
          if (err) {
            res.json(500, {
              code: 500,
              location: location,
              user: username,
              message: "Error retrieving info for user `" + username + "`."
            });
          }
          if (!user_resp) {
            res.json(404, {
              code: 404,
              location: location,
              user: username,
              message: "The user `" + username + "` does not exist."
            });
          }
          return user.applications().list(function(err, reply) {
            if (err) {
              res.json(500, {
                code: 500,
                location: location,
                user: username,
                message: "Error retrieving apps for user `" + username + "`."
              });
            }
            return res.json(200, {
              user: username,
              location: location,
              applications: reply
            });
          });
        });
      });
    };

    return WebServer;

  })();

  module.exports = WebServer;

}).call(this);
