// Generated by CoffeeScript 1.3.3
(function() {
  var Config, Identity, Logger, RedisUtils, WebServer, bcrypt, formidable, fs, generate_identity, restify, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Logger = require('./logger');

  Config = require('./config');

  restify = require('restify');

  _ref = require('./identity'), Identity = _ref.Identity, generate_identity = _ref.generate_identity;

  RedisUtils = require('./redisutils');

  bcrypt = require('bcrypt');

  require('pkginfo')(module, 'name', 'version');

  fs = require('fs');

  formidable = require('formidable');

  /**
   * The iOS-ota webserver command line interface class.
  */


  WebServer = (function() {

    function WebServer(port) {
      this.port = port != null ? port : 8080;
      this.authenticate = __bind(this.authenticate, this);

      this.setup_routing = __bind(this.setup_routing, this);

      this.config = Config.get();
      this.logger = Logger.get();
      this.identity = Identity.get();
      this.redis = RedisUtils.get();
      this.app = restify.createServer();
      this.app.use(restify.bodyParser({
        mapParams: true
      }));
      this.setup_routing();
      this.app.listen(this.port);
      this.logger.info("Webserver is up at: http://0.0.0.0:" + this.port);
    }

    WebServer.prototype.setup_routing = function() {
      var _this = this;
      this.app.get('/', function(req, res, next) {
        return res.json(200, {
          name: exports.name,
          version: exports.version
        });
      });
      this.app.get('/favicon.ico', function(req, res, next) {
        return res.json(404, {
          code: 404,
          message: "No favicon exists."
        });
      });
      this.app.get('/users', function(req, res, next) {
        return _this.redis.get_users(function(err, reply) {
          if (err) {
            return res.json(500, {
              message: reply
            });
          }
          return res.json(200, {
            users: reply ? reply : []
          });
        });
      });
      this.app.post('/users', function(req, res, next) {
        return _this.authenticate(req, function(err, reply) {
          var user;
          if (err) {
            return res.json(reply.code, {
              code: reply.code,
              message: reply.message
            });
          }
          user = reply.user;
          if (user.username === "admin") {
            return res.json(403, {
              code: 403,
              message: "Unable to modify administrative user."
            });
          }
          if (!reply.admin) {
            return res.json(401, {
              code: 401,
              message: "Only administrators are allowed to modify accounts."
            });
          }
          return fs.mkdir([_this.config.get('repository'), user.username].join('/'), function() {
            return bcrypt.genSalt(10, function(err, salt) {
              if (err) {
                return res.json(500, {
                  code: 500,
                  message: "Error creating bcrypt salt."
                });
              }
              return bcrypt.hash(user.secret, salt, function(error, hash) {
                if (error) {
                  return res.json(500, {
                    code: 500,
                    message: "Error creating bcrypt hash."
                  });
                }
                user.secret = hash;
                return _this.redis.add_or_update_user(user, function(err, reply) {
                  if (err) {
                    return res.json(500, {
                      code: 500,
                      message: "Error updating user: " + user.username
                    });
                  }
                  return res.json(200, {
                    message: "Successfully updated: " + user.username
                  });
                });
              });
            });
          });
        });
      });
      this.app.del('/users', function(req, res, next) {
        return res.json(501, {
          code: 501,
          message: "Restify current doesn't support parsing body params."
        });
      });
      this.app.get('/:user', function(req, res, next) {
        var location, name;
        location = [req.params.user];
        name = location.join('/');
        location.unshift(_this.config.get('repository'));
        return fs.readdir(location.join('/'), function(err, reply) {
          if (err) {
            return res.json(404, {
              code: 404,
              user: req.params.user,
              message: ''.concat("The user ", req.params.user, " does not exist.")
            });
          }
          return res.json(200, {
            user: req.params.user,
            apps: reply ? reply : []
          });
        });
      });
      this.app.get('/:user/:app/branches', function(req, res, next) {
        var location, name;
        location = [req.params.user, req.params.app, 'branches'];
        name = location.join('/');
        location.unshift(_this.config.get('repository'));
        return fs.readdir(location.join('/'), function(err, reply) {
          console.log(err);
          console.log(reply);
          return res.json(200, {
            mesasge: "BRANCHES BIATCH"
          });
        });
      });
      this.app.get('/:user/:app/tags', function(req, res) {
        var location;
        location = [req.params.user, req.params.app, 'tags'];
        return res.json(200, {
          name: [req.params.user, req.params.app, 'tags'].join('/'),
          tags: fs.readdirSync
        });
      });
      this.app.post('/:user/:app/branches', function(req, res) {
        var form, location;
        location = [req.params.user, req.params.app, 'branches'];
        this.logger.info(req);
        form = formidable.IncomingForm();
        return form.parse(req, function(err, fields, files) {
          return res.json(200, {
            message: "Recieved Upload",
            fields: fields,
            files: files
          });
        });
      });
      return this.app.post('/:user/:app/tags', function(req, res) {
        var form, location;
        location = [req.params.user, req.params.app, 'tags'];
        this.logger.info(req);
        form = formidable.IncomingForm();
        return form.parse(req, function(err, fields, files) {
          return res.json(200, {
            message: "Recieved Upload",
            fields: fields,
            files: files
          });
        });
      });
    };

    /**
     * Authenticates the user.
     * @param {Object} (req) The restify request object
     * @param {Function} (fn) The callback function
    */


    WebServer.prototype.authenticate = function(req, fn) {
      var credentials, err, reply, user,
        _this = this;
      err = false;
      credentials = {
        username: req.params.username,
        secret: req.params.secret
      };
      user = req.params.user;
      if (!credentials.username) {
        err = true;
        reply = {
          code: 401,
          message: "Unauthorized: No username parameter was provided."
        };
      }
      if (!credentials.secret) {
        err = true;
        reply = {
          code: 401,
          message: "Unauthorized: No secret parameter was provided."
        };
      }
      if (credentials.username === "admin") {
        if (credentials.secret !== this.config.get('admin_secret')) {
          err = true;
          reply = {
            code: 401,
            message: "Unauthorized: Invalid authentication secret."
          };
        } else {
          reply = {
            admin: true,
            user: user
          };
        }
        return fn(err, reply);
      } else {
        return this.redis.check_login(credentials, function(err, authenticated) {
          if (authenticated) {
            reply = {
              admin: false,
              user: authenticated
            };
          } else {
            err = true;
            reply = {
              code: 401,
              message: "Unauthorized: Invalid authentication secret."
            };
          }
          return fn(err, reply);
        });
      }
    };

    return WebServer;

  })();

  module.exports = WebServer;

}).call(this);
