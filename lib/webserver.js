// Generated by CoffeeScript 1.4.0
(function() {
  var Config, Identity, Logger, User, WebServer, formidable, fs, generate_identity, restify, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  restify = require('restify');

  formidable = require('formidable');

  require('pkginfo')(module, 'name', 'version');

  Config = require('./config');

  Logger = require('./logger');

  _ref = require('./identity'), Identity = _ref.Identity, generate_identity = _ref.generate_identity;

  User = require('./models/user');

  /**
   * The iOS-ota webserver command line interface class.
  */


  WebServer = (function() {

    function WebServer(port) {
      this.port = port != null ? port : 8080;
      this.authenticate_with_self_admin = __bind(this.authenticate_with_self_admin, this);
      this.authenticate = __bind(this.authenticate, this);
      this.setup_routing = __bind(this.setup_routing, this);
      this.config = Config.get();
      this.logger = Logger.get();
      this.identity = Identity.get();
      this.app = restify.createServer({
        name: exports.name
      });
      this.app.use(restify.authorizationParser());
      this.app.use(restify.bodyParser({
        mapParams: true
      }));
      this.setup_routing();
      this.app.listen(this.port);
      this.logger.info("Webserver is up at: http://0.0.0.0:" + this.port);
    }

    WebServer.prototype.setup_routing = function() {
      var _this = this;
      this.app.get('/', function(req, res, next) {
        return res.json(200, {
          name: exports.name,
          version: exports.version
        });
      });
      this.app.get('/help', function(req, res, next) {
        res.json(200, {
          message: "restdown docs coming soon."
        });
        return next();
      });
      this.app.get('/favicon.ico', function(req, res, next) {
        return next(new restify.codeToHttpError(404, "No favicon exists."));
      });
      this.app.get('/users', function(req, res, next) {
        var user;
        user = new User;
        return user.list(function(err, userlist) {
          if (err) {
            next(new restify.codeToHttpError(500, "Error retrieving user list."));
            return next();
          }
          res.json(200, {
            users: userlist
          });
          return next();
        });
      });
      this.app.post('/users/:user', function(req, res, next) {
        var handle_auth_response, user;
        user = req.params.user;
        handle_auth_response = function(err, reply) {
          if (err) {
            if (err.code === "UserDoesNotExist") {
              res.json(401, {
                code: 401,
                message: err.message
              });
            }
            if (err.code === "InvalidPassword") {
              res.json(401, {
                code: 401,
                message: "Unauthorized: Invalid authentication secret."
              });
            } else {
              res.json(500, {
                code: 500,
                message: reply.message
              });
            }
            return next();
          }
          if (user.username === "admin") {
            res.json(403, {
              code: 403,
              message: "Unable to modify the administrative user."
            });
            return next();
          }
          if (!reply.admin) {
            res.json(401, {
              code: 401,
              message: "Only administrators are permitted to modify accounts."
            });
            return next();
          }
          user = new User({
            name: req.params.user
          });
          return user.save(function(err, reply) {
            res.json(200, {
              message: reply
            });
            return next();
          });
        };
        return _this.authenticate_with_self_admin(req, handle_auth_response, user);
      });
      this.app.get('/:user', function(req, res, next) {
        var location, user, username;
        username = req.params.user;
        location = username;
        user = new User({
          name: username
        });
        return user.exists(username, function(err, user_resp) {
          if (err) {
            res.json(500, {
              code: 500,
              location: location,
              user: username,
              message: "Error retrieving info for user `" + username + "`."
            });
            return next();
          }
          if (!user_resp) {
            res.json(404, {
              code: 404,
              location: location,
              user: username,
              message: "The user `" + username + "` does not exist."
            });
            return next();
          }
          return user.applications().list(function(err, reply) {
            if (err) {
              res.json(500, {
                code: 500,
                location: location,
                user: username,
                message: "Error retrieving apps for user `" + username + "`."
              });
              return next();
            }
            res.json(200, {
              user: username,
              location: location,
              applications: reply
            });
            return next();
          });
        });
      });
      this.app.del('/users/:user', function(req, res, next) {
        var target, user;
        target = req.params.user;
        if (target === "admin") {
          res.json(403, {
            code: 403,
            message: "Unable to modify internal services."
          });
          return next();
        }
        user = new User();
        return user["delete"](target, function(err, reply) {
          res.json(200, {
            message: "Successfully deleted user `" + target + "`."
          });
          return next();
        });
      });
      this.app.put('/:user/:app', function(req, res, next) {
        res.json(200, {
          message: "Successfully updated application `" + req.params.app + "`."
        });
        return next();
      });
      this.app.get('/:user/:app', function(req, res, next) {
        var loc, location;
        location = [req.params.user, req.params.app];
        loc = location.join('/');
        location.unshift(_this.config.get('repository'));
        return fs.readdir(location.join('/'), function(err, reply) {
          if (err) {
            res.json(404, {
              code: 404,
              user: req.params.user,
              app: req.params.app,
              location: loc,
              message: "The application `" + req.params.app + "` does not exist."
            });
            return next();
          }
        });
      });
      this.app.get('/:user/:app/branches', function(req, res, next) {
        var loc, location;
        location = [req.params.user, req.params.app, 'branches'];
        loc = location.join('/');
        location.unshift(_this.config.get('repository'));
        return fs.readdir(location.join('/'), function(err, reply) {
          console.log(err);
          console.log(reply);
          res.json(200, {
            message: "branches"
          });
          return next();
        });
      });
      this.app.get('/:user/:app/tags', function(req, res) {
        var location;
        location = [req.params.user, req.params.app, 'tags'];
        res.json(200, {
          name: [req.params.user, req.params.app, 'tags'].join('/'),
          tags: []
        });
        return next();
      });
      this.app.post('/:user/:app/branches', function(req, res) {
        var form, location;
        location = [req.params.user, req.params.app, 'branches'];
        form = formidable.IncomingForm();
        return form.parse(req, function(err, fields, files) {
          res.json(200, {
            message: "Recieved Upload",
            fields: fields,
            files: files
          });
          return next();
        });
      });
      return this.app.post('/:user/:app/tags', function(req, res) {
        var form, location;
        location = [req.params.user, req.params.app, 'tags'];
        form = formidable.IncomingForm();
        return form.parse(req, function(err, fields, files) {
          res.json(200, {
            message: "Recieved Upload",
            fields: fields,
            files: files
          });
          return next();
        });
      });
    };

    /**
     * Authenticates the user.
     * @param {Object} (req) The restify request object
     * @param {Function} (fn) The callback function
    */


    WebServer.prototype.authenticate = function(req, fn) {
      var credentials, err, reply, user,
        _this = this;
      err = false;
      credentials = {
        username: req.params.username,
        secret: req.params.secret
      };
      if (!credentials.username) {
        err = true;
        reply = {
          code: 401,
          message: "Unauthorized: No username parameter was provided."
        };
      }
      if (!credentials.secret) {
        err = true;
        reply = {
          code: 401,
          message: "Unauthorized: No secret parameter was provided."
        };
      }
      if (credentials.username === "admin") {
        if (credentials.secret !== this.config.get('admin_secret')) {
          err = true;
          reply = {
            code: 401,
            message: "Unauthorized: Invalid authentication secret."
          };
        } else {
          reply = {
            admin: true
          };
        }
        return fn(err, reply);
      } else {
        user = new User();
        return user.check_login(credentials, function(err, authenticated) {
          if (authenticated) {
            reply = {
              admin: false
            };
          } else if (err.code === "ErrorConnectingToRedis") {
            err = true;
            reply = {
              code: 500,
              message: "Error connecting to redis."
            };
          } else {
            err = true;
            reply = {
              code: 401,
              message: "Unauthorized: Invalid authentication secret."
            };
          }
          return fn(err, reply);
        });
      }
    };

    /**
     * Authenticates the user, and if the user is managing themselves, elevate.
     * @param {Object} (req) The restify request object
     * @param {Function} (fn) The callback function
     * @param {String} (user) The user to test against for elevated privs
    */


    WebServer.prototype.authenticate_with_self_admin = function(req, fn, user) {
      var credentials,
        _this = this;
      credentials = {
        username: req.params.username,
        secret: req.params.secret
      };
      return this.authenticate(req, function(err, reply) {
        if (credentials.username === user) {
          reply.admin = true;
        }
        return fn(err, reply);
      });
    };

    return WebServer;

  })();

  module.exports = WebServer;

}).call(this);
