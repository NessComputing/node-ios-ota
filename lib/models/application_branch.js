// Generated by CoffeeScript 1.4.0
(function() {
  var ApplicationBranch, RedisObject, async,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('async');

  RedisObject = require('./redis_object');

  /**
   * A helper for working with branches for an application/user combo.
  */


  ApplicationBranch = (function(_super) {

    __extends(ApplicationBranch, _super);

    function ApplicationBranch(user, application, branch) {
      this.user = user;
      this.application = application;
      if (branch == null) {
        branch = null;
      }
      this.get_app_build_prefix = __bind(this.get_app_build_prefix, this);
      this.info = __bind(this.info, this);
      this.delete_all = __bind(this.delete_all, this);
      this["delete"] = __bind(this["delete"], this);
      this.save = __bind(this.save, this);
      this.list = __bind(this.list, this);
      this.branch_prefix = __bind(this.branch_prefix, this);
      this.branchlist_prefix = __bind(this.branchlist_prefix, this);
      ApplicationBranch.__super__.constructor.call(this, branch);
      this.basename = "node-ios-ota::applications";
      this.object_name = 'branches';
    }

    /**
     * Returns the the prefix for the branchlist.
     * @return {String} The branchlist prefix for the current application
    */


    ApplicationBranch.prototype.branchlist_prefix = function() {
      return [this.basename, this.user, this.application, this.object_name].join('::');
    };

    /**
     * Returns the prefix for a particular branch.
    */


    ApplicationBranch.prototype.branch_prefix = function() {
      return [this.branchlist_prefix(), this.current].join('::');
    };

    ApplicationBranch.prototype.list = function(fn) {
      return this.redis.smembers(this.branchlist_prefix(), fn);
    };

    /**
     * Inserts a new branch into the given application.
     * @param {String} (branch) The name of the branch to add
     * @param {Function} (fn) The callback function
    */


    ApplicationBranch.prototype.save = function(fn) {
      var resp;
      resp = this.redis.sadd(branch_prefix, branch);
      return fn(null, resp);
    };

    /**
     * Deletes a single branch for the given application.
     * @param {String} (branch) The name of the target branch
     * @param {Function} (fn) The callback function
    */


    ApplicationBranch.prototype["delete"] = function(branch, fn) {};

    /**
     * Deletes the branches for a given application.
     * @param {Function} (fn) The callback function
    */


    ApplicationBranch.prototype.delete_all = function(fn) {
      var _this = this;
      return this.list(function(err, branchlist) {
        return async.forEach(branchlist, _this["delete"], fn);
      });
    };

    /**
     * Returns the branch information and file hashes for the given app/branch.
     * @param {String} (application) The name of the application to retrieve
     * @param {String} (branch) The name of the branch to retrieve
    */


    ApplicationBranch.prototype.info = function(application, branch) {};

    /**
     * Returns the application build info for either a branch or tag.
     * @param {String} (application) The name of the application to retrieve
     * @param {String} (dtype) The data type to get `branches` or `tags`
    */


    ApplicationBranch.prototype.get_app_build_prefix = function(application, dtype) {
      return [this.applist_prefix(), application, dtype].join('::');
    };

    return ApplicationBranch;

  })(RedisObject);

  module.exports = ApplicationBranch;

}).call(this);
