// Generated by CoffeeScript 1.4.0
(function() {
  var ApplicationBranch, Files, RedisObject, async, fs,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  async = require('async');

  RedisObject = require('./redis_object');

  Files = require('./files');

  /**
   * A helper for working with branches for an application/user combo.
  */


  ApplicationBranch = (function(_super) {

    __extends(ApplicationBranch, _super);

    function ApplicationBranch(user, application, branch) {
      this.user = user;
      this.application = application;
      if (branch == null) {
        branch = null;
      }
      this.delete_directories = __bind(this.delete_directories, this);
      this.setup_directories = __bind(this.setup_directories, this);
      this.files = __bind(this.files, this);
      this.delete_all = __bind(this.delete_all, this);
      this["delete"] = __bind(this["delete"], this);
      this.save = __bind(this.save, this);
      this.all = __bind(this.all, this);
      this.find = __bind(this.find, this);
      this.list = __bind(this.list, this);
      this.branchlist_prefix = __bind(this.branchlist_prefix, this);
      ApplicationBranch.__super__.constructor.call(this, branch);
      this.basename = "node-ios-ota::applications";
      this.object_name = 'branches';
    }

    /**
     * Returns the the prefix for the branchlist.
     * @return {String} The branchlist prefix for the current application
    */


    ApplicationBranch.prototype.branchlist_prefix = function() {
      return [this.basename, this.user, this.application, this.object_name].join('::');
    };

    /**
     * Returns the list of branches for the given user/application.
     * @param {Function} (fn) The callback function
    */


    ApplicationBranch.prototype.list = function(fn) {
      return this.redis.smembers(this.branchlist_prefix(), fn);
    };

    /**
     * Returns the information for the current application branch.
     * @param {String} (name) The name of the branch to retrieve
     * @param {Function} (fn) The callback function
    */


    ApplicationBranch.prototype.find = function(name, fn) {
      var original,
        _this = this;
      original = this.current;
      this.current = name;
      return this.files().all(function(err, reply) {
        _this.current = original;
        return fn(err, {
          name: name,
          files: reply
        });
      });
    };

    /**
     * Returns the information for all the current application branches.
     * @param {Function} (fn) The callback function
    */


    ApplicationBranch.prototype.all = function(fn) {
      var _this = this;
      return this.list(function(err, branches) {
        return async.map(branches, _this.find, function(err, results) {
          return fn(err, {
            branches: results
          });
        });
      });
    };

    /**
     * Inserts a new branch into the given application.
     * @param {String} (branch) The name of the branch to add
     * @param {Function} (fn) The callback function
    */


    ApplicationBranch.prototype.save = function(fn) {
      var stat_add, status,
        _this = this;
      stat_add = this.redis.sadd(this.branchlist_prefix(), this.current);
      status = stat_add ? null : {
        message: "Error saving branch: `" + this.user + "/" + this.application + "/" + this.current + "`."
      };
      return this.setup_directories(this.current, function(err, reply) {
        return fn(status, _this.current);
      });
    };

    /**
     * Deletes a single branch for the given application.
     * @param {String} (branch) The name of the target branch
     * @param {Function} (fn) The callback function
    */


    ApplicationBranch.prototype["delete"] = function(branch, fn) {
      var _this = this;
      this.current = branch;
      this.redis.srem(this.branchlist_prefix(), branch);
      return this.files().delete_all(function(err, reply) {
        return _this.delete_directories(branch, function(err, reply) {
          return fn(null);
        });
      });
    };

    /**
     * Deletes the branches for a given application.
     * @param {Function} (fn) The callback function
    */


    ApplicationBranch.prototype.delete_all = function(fn) {
      var _this = this;
      return this.list(function(err, branchlist) {
        return async.forEach(branchlist, _this["delete"], fn);
      });
    };

    /**
     * Returns the list of files for the current branch.
     * @return {Object} The Files object for the current branch
    */


    ApplicationBranch.prototype.files = function() {
      return new Files(this.user, this.application, this.object_name, this.current);
    };

    /**
     * Creates the directories for the branch.
     * @param {Object} (branch) The branch to create directories for
     * @param {Function} (fn) The callback function
    */


    ApplicationBranch.prototype.setup_directories = function(branch, fn) {
      var dirloc, target,
        _this = this;
      dirloc = [this.user, this.application, this.object_name, branch].join('/');
      target = [this.config.get('repository'), dirloc].join('/');
      return fs.exists(target, function(exists) {
        if (!exists) {
          return fs.mkdir(target, function(err, made) {
            if (err) {
              _this.logger.error("Error setting up directories for `" + dirloc + "`.");
              return fn(err, made);
            }
          });
        } else {
          return fn(null, false);
        }
      });
    };

    /**
     * Deletes the directories for the branch.
     * @param {Object} (branch) The branch to create directories for
     * @param {Function} (fn) The callback function
    */


    ApplicationBranch.prototype.delete_directories = function(branch, fn) {
      var dirloc,
        _this = this;
      dirloc = [this.user, this.application, this.object_name, branch].join('/');
      return fs.rmdir([this.config.get('repository'), dirloc].join('/'), function(err) {
        if (err) {
          _this.logger.error("Error removing directories for `" + dirloc + "`.");
        }
        return fn(null, true);
      });
    };

    return ApplicationBranch;

  })(RedisObject);

  module.exports = ApplicationBranch;

}).call(this);
