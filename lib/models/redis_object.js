// Generated by CoffeeScript 1.4.0
(function() {
  var Config, RedisObject, RedisSingleton,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RedisSingleton = require('./redis_singleton');

  Config = require('../config');

  /**
   * Acts as a base class for all Redis-based objects.
   * @param {Object} (obj) The object to
  */


  RedisObject = (function() {

    function RedisObject(obj) {
      if (obj == null) {
        obj = null;
      }
      this["delete"] = __bind(this["delete"], this);
      this.save = __bind(this.save, this);
      this.find = __bind(this.find, this);
      this.all = __bind(this.all, this);
      this.build = __bind(this.build, this);
      this.prefix = __bind(this.prefix, this);
      this.base_prefix = "node-ios-ota";
      this.object_name = "redis-object";
      this.redis = RedisSingleton.get();
      this.config = Config.get();
      this.current = obj;
    }

    /**
     * Returns the redis prefix for the current object type.
     * @return {String} The redis object prefix for the current object
    */


    RedisObject.prototype.prefix = function() {
      return [this.base_prefix, this.object_name].join('::');
    };

    /**
     * Creates a new redis object.
     * @param {Function} (fn) The callback function
    */


    RedisObject.prototype.build = function(obj) {
      this.current = obj;
      return this;
    };

    /**
     * Returns all of the redis objects of the current object type.
     * @param {Object} (filter) The object keys you wish to return (null is all)
     * @param {Function} (fn) The callback function
    */


    RedisObject.prototype.all = function(filter, fn) {
      if (filter == null) {
        filter = null;
      }
      this.current = null;
      if (!filter) {
        filter = {};
      }
      return fn(null, []);
    };

    /**
     * Searches for the redis objects that match the query.
     * @param {Object} (query) The query object to search
     * @param {Function} (fn) The callback function
    */


    RedisObject.prototype.find = function(query, fn) {
      this.current = null;
      return fn(null, []);
    };

    /**
     * Saves the current object if there is one.
     * @param {Function} (fn) The callback function
    */


    RedisObject.prototype.save = function(fn) {
      if (!this.current) {
        return fn(null, false);
      }
      return fn(null, true);
    };

    /**
     * Deletes a redis object that matches the query.
     * @param {Object} (query) The query object to search
     * @param {Function} (fn) the callback function
    */


    RedisObject.prototype["delete"] = function(fn) {
      return fn(null, true);
    };

    return RedisObject;

  })();

  module.exports = RedisObject;

}).call(this);
