// Generated by CoffeeScript 1.4.0
(function() {
  var RedisObject, UserApp, generate_identity,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  RedisObject = require('./redis_object');

  generate_identity = require('../identity').generate_identity;

  /**
   * Acts as a base class for all Redis-based objects.
  */


  UserApp = (function(_super) {

    __extends(UserApp, _super);

    function UserApp(user, obj) {
      this.user = user;
      if (obj == null) {
        obj = null;
      }
      this.save = __bind(this.save, this);
      this.tag_info = __bind(this.tag_info, this);
      this.tags = __bind(this.tags, this);
      this.branch_info = __bind(this.branch_info, this);
      this.branches = __bind(this.branches, this);
      this.find = __bind(this.find, this);
      this.all = __bind(this.all, this);
      this.list = __bind(this.list, this);
      this.application_prefix = __bind(this.application_prefix, this);
      this.user_prefix = __bind(this.user_prefix, this);
      UserApp.__super__.constructor.call(this, obj);
      this.object_name = 'application';
    }

    /**
     * The applications prefix for the specified user.
    */


    UserApp.prototype.user_prefix = function() {
      return ''.concat(this.prefix(), 's', '::', this.user);
    };

    /**
     * The user-specific application prefix for a given application.
     * @param {String} (application) The name of the application
    */


    UserApp.prototype.application_prefix = function(application) {
      return [this.user_prefix(), application].join('::');
    };

    /**
     * Returns the list of application names for a given user.
     * @param {Function} (fn) The callback function
    */


    UserApp.prototype.list = function(fn) {
      return this.redis.smembers(this.application_prefix(), fn);
    };

    /**
     * Returns all of the user objects with the given filter.
     * @param {Object} (filter) The object keys you wish to return (null is all)
     * @param {Function} (fn) The callback function
    */


    UserApp.prototype.all = function(filter, fn) {
      var _this = this;
      if (filter == null) {
        filter = {};
      }
      if (typeof filter === "function") {
        fn = filter;
      }
      this.current = null;
      return this.list(function(err, applications) {
        if ((filter.name && Object.keys(filter).length === 1) || err) {
          return fn(err, applications);
        }
      });
    };

    /**
     * Searches for the redis objects that match the query.
     * @param {Object} (name) The name of the application to search for
     * @param {Function} (fn) The callback function
    */


    UserApp.prototype.find = function(name, admin, fn) {
      var _this = this;
      if (admin == null) {
        admin = false;
      }
      if (typeof admin === "function") {
        fn = admin;
      }
      this.current = null;
      return this.list(function(err, applications) {
        if (err) {
          return fn(err, applications);
        }
      });
    };

    /**
     * Returns the list of branches for a particular application.
     * @param {String} (application) The name of the application to retrieve
    */


    UserApp.prototype.branches = function(application) {};

    /**
     * Returns the branch information and file hashes for the given app/branch.
     * @param {String} (application) The name of the application to retrieve
     * @param {String} (branch) The name of the branch to retrieve
    */


    UserApp.prototype.branch_info = function(application, branch) {};

    /**
     * Returns the list of tags for a particular application.
     * @param {String} (application) The name of the application to retrieve
    */


    UserApp.prototype.tags = function(application) {};

    /**
     * Returns the tag information and file hashes for the given app/branch.
     * @param {String} (application) The name of the application to retrieve
     * @param {String} (tag) The name of the tag to retrieve
    */


    UserApp.prototype.tag_info = function(application, tag) {};

    /**
     * Searches for the redis object that matches the query.
     * @param {Object} (query) The query object to search
     * @param {Function} (fn) The callback function
    */


    /**
     * Adds a new redis object of the current type to the database.
     * @param {Object} (obj) The object to add
     * @param {Function} (fn) The callback function
    */


    UserApp.prototype.save = function(fn) {
      var target;
      if (!this.current) {
        return fn(null, false);
      }
      target = this.current;
      return console.log('target: ' + target);
    };

    /**
     * Deletes a redis object that matches the query.
     * @param {Object} (query) The query object to search
     * @param {Function} (fn) the callback function
    */


    return UserApp;

  })(RedisObject);

  module.exports = UserApp;

}).call(this);
