// Generated by CoffeeScript 1.3.3
(function() {
  var RedisObject, UserApp, generate_identity,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  RedisObject = require('./redis_object');

  generate_identity = require('../identity').generate_identity;

  /**
   * Acts as a base class for all Redis-based objects.
  */


  UserApp = (function(_super) {

    __extends(UserApp, _super);

    function UserApp(user, obj) {
      this.user = user;
      if (obj == null) {
        obj = null;
      }
      this.save = __bind(this.save, this);

      this.find = __bind(this.find, this);

      this.all = __bind(this.all, this);

      this.build = __bind(this.build, this);

      this.list = __bind(this.list, this);

      UserApp.__super__.constructor.call(this, obj);
      this.object_name = 'application';
    }

    /**
     * Returns the list of application names for a given user.
     * @param {Function} (fn) The callback function
    */


    UserApp.prototype.list = function(fn) {
      console.log(''.concat(this.prefix(), 's', '::', this.user));
      return this.redis.smembers(''.concat(this.prefix(), 's', '::', this.user), fn);
    };

    /**
     * Creates a new application for the specified user.
     * @param {Function} (fn) The callback function
    */


    UserApp.prototype.build = function(obj) {
      this.current = obj;
      return this;
    };

    /**
     * Returns all of the user objects with the given filter.
     * @param {Object} (filter) The object keys you wish to return (null is all)
     * @param {Function} (fn) The callback function
    */


    UserApp.prototype.all = function(filter, fn) {
      var _this = this;
      if (filter == null) {
        filter = null;
      }
      this.current = null;
      filter || (filter = {});
      return this.list(function(err, applications) {
        if ((filter.name && Object.keys(filter).length === 1) || err) {
          return fn(err, applications);
        }
      });
    };

    /**
     * Searches for the redis objects that match the query.
     * @param {Object} (query) The query object to search
     * @param {Function} (fn) The callback function
    */


    UserApp.prototype.find = function(query, fn) {
      var _this = this;
      this.current = null;
      query || (query = {});
      this.list(function(err, applications) {
        var _ref;
        if (err) {
          return fn(err, applications);
        }
        if (_ref = query.name, __indexOf.call(applications, _ref) >= 0) {
          return console.log("GOT IT");
        }
      });
      return fn(null, []);
    };

    /**
     * Searches for the redis object that matches the query.
     * @param {Object} (query) The query object to search
     * @param {Function} (fn) The callback function
    */


    /**
     * Adds a new redis object of the current type to the database.
     * @param {Object} (obj) The object to add
     * @param {Function} (fn) The callback function
    */


    UserApp.prototype.save = function(fn) {
      var target, user_prefix,
        _this = this;
      if (!this.current) {
        return fn(null, false);
      }
      target = this.current;
      user_prefix = [this.prefix(), target.name].join('::');
      return this.all({
        name: true
      }, function(err, usernames) {
        var stat_add, stat_hm, status, _ref;
        if (_ref = target.name, __indexOf.call(usernames, _ref) >= 0) {
          _this.current = target;
          return fn(null, false);
        }
        target.secret = generate_identity();
        stat_add = _this.redis.sadd(''.concat(_this.prefix(), 's'), target.name);
        stat_hm = _this.redis.hmset(user_prefix, target);
        _this.current = target;
        status = stat_add && stat_hm ? null : {
          message: "Error saving user"
        };
        return fn(status, _this.current);
      });
    };

    /**
     * Deletes a redis object that matches the query.
     * @param {Object} (query) The query object to search
     * @param {Function} (fn) the callback function
    */


    return UserApp;

  })(RedisObject);

  module.exports = UserApp;

}).call(this);
