// Generated by CoffeeScript 1.4.0
(function() {
  var ApplicationTag, RedisObject, async,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('async');

  RedisObject = require('./redis_object');

  /**
   * A helper for working with tags for an application/user combo.
  */


  ApplicationTag = (function(_super) {

    __extends(ApplicationTag, _super);

    function ApplicationTag(user, application, tag) {
      this.user = user;
      this.application = application;
      if (tag == null) {
        tag = null;
      }
      this.get_app_build_prefix = __bind(this.get_app_build_prefix, this);
      this.info = __bind(this.info, this);
      this.delete_all = __bind(this.delete_all, this);
      this["delete"] = __bind(this["delete"], this);
      this.save = __bind(this.save, this);
      this.list = __bind(this.list, this);
      this.tag_prefix = __bind(this.tag_prefix, this);
      this.taglist_prefix = __bind(this.taglist_prefix, this);
      ApplicationTag.__super__.constructor.call(this, tag);
      this.basename = "node-ios-ota::applications";
      this.object_name = 'tags';
    }

    /**
     * Returns the the prefix for the taglist.
     * @return {String} The taglist prefix for the current application
    */


    ApplicationTag.prototype.taglist_prefix = function() {
      return [this.basename, this.user, this.application, this.object_name].join('::');
    };

    /**
     * Returns the prefix for a particular tag.
     * @return {String} The prefix for the given tag
    */


    ApplicationTag.prototype.tag_prefix = function() {
      return [this.taglist_prefix(), this.current].join('::');
    };

    ApplicationTag.prototype.list = function(fn) {
      return this.redis.smembers(tags_prefix, fn);
    };

    /**
     * Inserts a new tag into the given application.
     * @param {String} (branch) The name of the branch to add
     * @param {Function} (fn) The callback function
    */


    ApplicationTag.prototype.save = function(fn) {
      var resp, tags_prefix;
      tags_prefix = this.get_app_build_prefix(application, "tags");
      resp = this.redis.sadd(tags_prefix, tag);
      return fn(null, resp);
    };

    /**
     * Deletes a single tag for the given application.
     * @param {String} (tag) The name of the target tag
     * @param {Function} The callback function
    */


    ApplicationTag.prototype["delete"] = function(tag, fn) {};

    /**
     * Deletes all of the tags for the current application.
     * @param {Function} The callback function
    */


    ApplicationTag.prototype.delete_all = function(fn) {
      var _this = this;
      return this.list(function(err, taglist) {
        return async.forEach(taglist, _this.delete_tag, fn);
      });
    };

    /**
     * Returns the tag information and file hashes for the given app/branch.
     * @param {String} (application) The name of the application to retrieve
     * @param {String} (tag) The name of the tag to retrieve
    */


    ApplicationTag.prototype.info = function(application, tag) {};

    /**
     * Returns the application build info for either a branch or tag.
     * @param {String} (application) The name of the application to retrieve
     * @param {String} (dtype) The data type to get `branches` or `tags`
    */


    ApplicationTag.prototype.get_app_build_prefix = function(application, dtype) {
      return [this.applist_prefix(), application, dtype].join('::');
    };

    return ApplicationTag;

  })(RedisObject);

  module.exports = ApplicationTag;

}).call(this);
