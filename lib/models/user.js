// Generated by CoffeeScript 1.3.3
(function() {
  var RedisObject, User, UserApp, generate_identity, merge,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  merge = require('merge-recursive');

  RedisObject = require('./redis_object');

  generate_identity = require('../identity').generate_identity;

  UserApp = require('./user_application');

  /**
   * Acts as a base class for all Redis-based objects.
  */


  User = (function(_super) {

    __extends(User, _super);

    function User() {
      this.save_user = __bind(this.save_user, this);

      this.save = __bind(this.save, this);

      this.find = __bind(this.find, this);

      this.all = __bind(this.all, this);

      this.list = __bind(this.list, this);

      this.user_prefix = __bind(this.user_prefix, this);

      this.userlist_prefix = __bind(this.userlist_prefix, this);
      User.__super__.constructor.apply(this, arguments);
      this.object_name = 'user';
    }

    /**
     * The user list prefix.
     * @return {String} The prefix for the list of users.
    */


    User.prototype.userlist_prefix = function() {
      return ''.concat(this.prefix(), 's');
    };

    /**
     * The user-specific data prefix.
     * @param {String} The name of the user you want the prefix for
     * @return {String} The prefix for the user-specific data
    */


    User.prototype.user_prefix = function(name) {
      return [this.prefix(), name].join('::');
    };

    /**
     * Returns the list of user names.
     * @param {Function} (fn) The callback function
    */


    User.prototype.list = function(fn) {
      return this.redis.smembers(this.userlist_prefix(), fn);
    };

    /**
     * Returns all of the user objects with the given filter.
     * @param {Object} (filter) The object keys you wish to return (null is all)
     * @param {Function} (fn) The callback function
    */


    User.prototype.all = function(filter, fn) {
      var _this = this;
      if (filter == null) {
        filter = null;
      }
      this.current = null;
      if (!filter) {
        filter = {};
      }
      return this.list(function(err, usernames) {
        if ((filter.name && Object.keys(filter).length === 1) || err) {
          return fn(err, usernames);
        }
      });
    };

    /**
     * Searches for the redis objects that match the query.
     * @param {String} (name) The name of the user to find
     * @param {Function} (fn) The callback function
    */


    User.prototype.find = function(name, fn) {
      var _this = this;
      this.current = null;
      return this.list(function(err, usernames) {
        if (err) {
          return fn(err, usernames);
        }
        if (__indexOf.call(usernames, name) >= 0) {
          return _this.redis.hgetall(_this.user_prefix(name), function(err, obj) {
            if (err) {
              err = {
                message: ''.concat("Error retrieving userinfo for `", name, "`.")
              };
            }
            return fn(err, obj);
          });
        } else {
          return fn(null, {});
        }
      });
    };

    /**
     * Searches for the redis object that matches the query.
     * @param {Object} (query) The query object to search
     * @param {Function} (fn) The callback function
    */


    /**
     * Adds a new redis object of the current type to the database.
     * @param {Object} (obj) The object to add
     * @param {Function} (fn) The callback function
    */


    User.prototype.save = function(fn) {
      var target,
        _this = this;
      if (!this.current) {
        return fn(null, false);
      }
      if (typeof this.current.name === "string") {
        this.current.name = this.current.name.toLowerCase();
      }
      target = this.current;
      return this.list(function(err, usernames) {
        var _ref;
        if (_ref = target.name, __indexOf.call(usernames, _ref) >= 0) {
          return _this.find(target.name, function(err, userinfo) {
            userinfo = userinfo ? userinfo : {};
            target = merge.recursive(userinfo, target);
            return _this.save_user(target, fn);
          });
        } else {
          return _this.save_user(target, fn);
        }
      });
    };

    /**
     * Saves the given user object.
     * @param {Object} (obj) The user object to save
     * @return {Object} The status of the object save
    */


    User.prototype.save_user = function(obj, fn) {
      var stat_add, stat_hm, status;
      obj.secret || (obj.secret = generate_identity());
      stat_add = this.redis.sadd(this.userlist_prefix(), obj.name);
      stat_hm = this.redis.hmset(this.user_prefix(obj.name), obj);
      status = stat_add && stat_hm ? null : {
        message: ''.concat("Error saving user: `", obj.name, "`.")
      };
      this.current = obj;
      return fn(status, this.current);
    };

    /**
     * Deletes a redis object that matches the query.
     * @param {Object} (query) The query object to search
     * @param {Function} (fn) the callback function
    */


    return User;

  })(RedisObject);

  module.exports = User;

}).call(this);
