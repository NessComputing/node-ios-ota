// Generated by CoffeeScript 1.4.0
(function() {
  var Application, RedisObject, User, async, fs, generate_identity, merge, mkdirp,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  merge = require('merge-recursive');

  async = require('async');

  mkdirp = require('mkdirp');

  RedisObject = require('./redis_object');

  Application = require('./application');

  generate_identity = require('../identity').generate_identity;

  /**
   * A helper for representing a particular user and their applications.
  */


  User = (function(_super) {

    __extends(User, _super);

    function User() {
      this.applications = __bind(this.applications, this);
      this.delete_directories = __bind(this.delete_directories, this);
      this.setup_directories = __bind(this.setup_directories, this);
      this.check_login = __bind(this.check_login, this);
      this.exists = __bind(this.exists, this);
      this.delete_all = __bind(this.delete_all, this);
      this["delete"] = __bind(this["delete"], this);
      this.save_user = __bind(this.save_user, this);
      this.save = __bind(this.save, this);
      this.find = __bind(this.find, this);
      this.all = __bind(this.all, this);
      this.list = __bind(this.list, this);
      this.user_prefix = __bind(this.user_prefix, this);
      this.userlist_prefix = __bind(this.userlist_prefix, this);      User.__super__.constructor.apply(this, arguments);
      this.object_name = 'user';
    }

    /**
     * The user list prefix.
     * @return {String} The prefix for the list of users.
    */


    User.prototype.userlist_prefix = function() {
      return ''.concat(this.prefix(), 's');
    };

    /**
     * The user-specific data prefix.
     * @param {String} The name of the user you want the prefix for
     * @return {String} The prefix for the user-specific data
    */


    User.prototype.user_prefix = function(name) {
      return [this.prefix(), name].join('::');
    };

    /**
     * Returns the list of user names.
     * @param {Function} (fn) The callback function
    */


    User.prototype.list = function(fn) {
      return this.redis.smembers(this.userlist_prefix(), fn);
    };

    /**
     * Returns all of the user objects with the given filter.
     * @param {Object} (filter) The object keys you wish to return (null is all)
     * @param {Function} (fn) The callback function
    */


    User.prototype.all = function(filter, fn) {
      var _this = this;
      if (filter == null) {
        filter = {};
      }
      if (typeof filter === "function") {
        fn = filter;
      }
      this.current = null;
      return this.list(function(err, usernames) {
        if ((filter.name && Object.keys(filter).length === 1) || err) {
          return fn(err, usernames);
        }
      });
    };

    /**
     * Searches for the redis objects that match the query.
     * @param {String} (name) The name of the user to find
     * @param {Function} (fn) The callback function
    */


    User.prototype.find = function(name, admin, fn) {
      var _this = this;
      if (admin == null) {
        admin = false;
      }
      if (typeof admin === "function") {
        fn = admin;
      }
      this.current = null;
      return this.list(function(err, usernames) {
        if (err) {
          return fn(err, usernames);
        }
        if (__indexOf.call(usernames, name) >= 0) {
          return _this.redis.hgetall(_this.user_prefix(name), function(err, obj) {
            if (err) {
              err = {
                code: "RedisLookupFailed",
                message: "Error retrieving userinfo for `" + name + "`."
              };
            }
            if (!admin) {
              delete obj['secret'];
            }
            return fn(err, obj);
          });
        } else {
          return fn(null, {});
        }
      });
    };

    /**
     * Adds a new user object, merging and saving the current if it exists.
     * @param {Function} (fn) The callback function
    */


    User.prototype.save = function(update_secret, fn) {
      var target,
        _this = this;
      if (update_secret == null) {
        update_secret = false;
      }
      if (typeof update_secret === "function" && (typeof fn === "undefined" || typeof fn === "null")) {
        fn = update_secret;
        update_secret = false;
      }
      if (!this.current) {
        return fn(null, false);
      }
      if (typeof this.current.name === "string") {
        this.current.name = this.current.name.toLowerCase();
      }
      target = this.current;
      return this.list(function(err, usernames) {
        var handle_save, _ref;
        handle_save = function(err, userinfo) {
          var secret;
          userinfo = userinfo ? userinfo : {};
          secret = target.secret;
          target = merge.recursive(userinfo, target);
          if (update_secret) {
            target.secret = secret;
          }
          return _this.save_user(target, fn);
        };
        if (_ref = target.name, __indexOf.call(usernames, _ref) >= 0) {
          return _this.find(target.name, handle_save, true);
        } else {
          return _this.save_user(target, fn);
        }
      });
    };

    /**
     * Saves the given user object.
     * @param {Object} (obj) The user object to save
     * @param {Function} The callback function
    */


    User.prototype.save_user = function(obj, fn) {
      var stat_add, stat_hm, status,
        _this = this;
      obj.secret || (obj.secret = generate_identity());
      stat_add = this.redis.sadd(this.userlist_prefix(), obj.name);
      stat_hm = this.redis.hmset(this.user_prefix(obj.name), obj);
      status = stat_add && stat_hm ? null : {
        message: "Error saving user: `" + obj.name + "`."
      };
      return this.setup_directories(obj.name, function(err, made) {
        _this.current = obj;
        return fn(status, _this.current);
      });
    };

    /**
     * Deletes a redis object that matches the query.
     * @param {String} (username) The username to delete
     * @param {Function} (fn) the callback function
    */


    User.prototype["delete"] = function(username, fn) {
      var _this = this;
      this.current = {
        name: username.toLowerCase()
      };
      this.redis.srem(this.userlist_prefix(), username);
      this.redis.del(this.user_prefix(username));
      return this.applications().delete_all(function(err, reply) {
        return _this.delete_directories(username, function(err, succ) {
          if (err) {
            return fn(true, false);
          } else {
            return fn(null, true);
          }
        });
      });
    };

    /**
     * Deletes every user that currently exists.
     * @param {Function} (fn) The callback function
    */


    User.prototype.delete_all = function(fn) {
      var _this = this;
      return this.list(function(err, usernames) {
        if (usernames.length) {
          return async.each(usernames, _this["delete"], fn);
        } else {
          return fn(err);
        }
      });
    };

    /**
     * Checks whether or not the given user exists.
     * @param {String} (username) The username to check the existance of
     * @param {Function} (fn) The callback function
    */


    User.prototype.exists = function(username, fn) {
      return this.redis.sismember(this.userlist_prefix(), username, fn);
    };

    /**
     * Checks the login for a given user
    */


    User.prototype.check_login = function(user, fn) {
      var _this = this;
      return this.find(user.username, function(err, reply) {
        if (typeof reply === "undefined") {
          err = {
            code: "ErrorConnectingToRedis",
            message: "Error connecting to redis database."
          };
          return fn(err, reply);
        }
        if (Object.keys(reply).length === 0) {
          err = {
            code: "UserDoesNotExist",
            message: "User `" + user.username + "` does not exist."
          };
        }
        if (err) {
          return fn(err, reply);
        }
        if (user.secret !== reply.secret) {
          err = {
            code: "InvalidPassword"
          };
        }
        return fn(err, reply);
      }, true);
    };

    /**
     * Creates the directories for a user.
     * @param {Object} (username) The username to create directories for
     * @param {Function} (fn) The callback function
    */


    User.prototype.setup_directories = function(username, fn) {
      var _this = this;
      return mkdirp([this.config.get('repository'), username].join('/'), function(err, made) {
        if (err) {
          _this.logger.error("Error setting up directories for `" + username + "`.");
        }
        return fn(err, made);
      });
    };

    /**
     * Deletes the directories for a user.
     * @param {Object} (username) The username to delete directories of
     * @param {Function} (fn) The callback function
    */


    User.prototype.delete_directories = function(username, fn) {
      var _this = this;
      return fs.rmdir([this.config.get('repository'), username].join('/'), function(err) {
        if (err) {
          _this.logger.error("Error removing directories for `" + username + "`.");
        }
        return fn(null, true);
      });
    };

    /**
     * Returns the applications object for the current user.
     * @return {Object} The Application object for the current user
    */


    User.prototype.applications = function() {
      return new Application(this.current.name);
    };

    return User;

  })(RedisObject);

  module.exports = User;

}).call(this);
