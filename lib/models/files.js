// Generated by CoffeeScript 1.4.0
(function() {
  var Files, RedisObject, async, filemd5, fs, mv, path, rimraf,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  fs = require('fs');

  async = require('async');

  mv = require('mv');

  rimraf = require('rimraf');

  RedisObject = require('./redis_object');

  filemd5 = require('../filemd5');

  /**
   * A helper for working with files for a branch or tag of an application.
  */


  Files = (function(_super) {

    __extends(Files, _super);

    function Files(user, application, dtype, name) {
      this.user = user;
      this.application = application;
      this.dtype = dtype;
      if (name == null) {
        name = null;
      }
      this.file_extension = __bind(this.file_extension, this);
      this.delete_files = __bind(this.delete_files, this);
      this.setup_file = __bind(this.setup_file, this);
      this.delete_all = __bind(this.delete_all, this);
      this["delete"] = __bind(this["delete"], this);
      this.save = __bind(this.save, this);
      this.filepath = __bind(this.filepath, this);
      this.find = __bind(this.find, this);
      this.all = __bind(this.all, this);
      this.list = __bind(this.list, this);
      this.files_prefix = __bind(this.files_prefix, this);
      Files.__super__.constructor.call(this, name);
      this.basename = "node-ios-ota::applications";
      this.object_name = 'files';
    }

    /**
     * Returns the prefix for the files hash.
     * @return {String} The prefix for the given files hash
    */


    Files.prototype.files_prefix = function() {
      return [this.basename, this.user, this.application, this.dtype, this.current, "files"].join('::');
    };

    /**
     * Returns the list of files for the current branch/tag.
     * @param {Function} (fn) The callback function
    */


    Files.prototype.list = function(fn) {
      var _this = this;
      return this.redis.hkeys(this.files_prefix(), function(err, reply) {
        return fn(err, reply);
      });
    };

    /**
     * Returns the full information hash all of the current files.
     * @param {Function} (fn) The callback function
    */


    Files.prototype.all = function(fn) {
      var _this = this;
      return this.redis.hgetall(this.files_prefix(), function(err, reply) {
        var key, new_reply, _i, _len, _ref;
        if (reply) {
          new_reply = [];
          _ref = Object.keys(reply);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            key = _ref[_i];
            new_reply.push({
              name: key,
              md5: reply[key]
            });
          }
        } else {
          new_reply = [];
        }
        return fn(err, new_reply);
      });
    };

    /**
     * Finds and returns the information hash for a particular file.
     * @param {String} (filename) The filename to find information about
     * @param {Function} (fn) The callback function
    */


    Files.prototype.find = function(filename, fn) {
      var _this = this;
      return this.redis.hget(this.files_prefix(), filename, function(err, reply) {
        if (reply) {
          reply = {
            name: filename,
            md5: reply
          };
        }
        return fn(err, reply);
      });
    };

    /**
     * Returns the path to the file for reading.
    */


    Files.prototype.filepath = function(filename) {
      var dirloc, target_dir;
      dirloc = [this.user, this.application, this.dtype, this.current].join('/');
      target_dir = [this.config.get('repository'), dirloc].join('/');
      return path.normalize([target_dir, filename].join('/'));
    };

    /**
     * Adds a new files object, merging and saving the current if it exists.
     * @param {Object} (files) A single or list of filenames and md5s to add
     * @param {Function} (fn) The callback function
     *
     * @example
     *
     *   files = [
     *     { location: "/tmp/54e05c292ef585094a12b20818b3f952", name: "master.ipa" },
     *     { location: "/tmp/ab1e5d1ed4be9d7cb8376cbf12f85ca8", name: "master.plist" }
     *   ]
     *
    */


    Files.prototype.save = function(files, fn) {
      var filemap, flist,
        _this = this;
      if (!(files instanceof Array)) {
        files = Array(files);
      }
      filemap = [];
      filemap.push(this.files_prefix());
      flist = [];
      return async.map(files, this.setup_file, function(err, reply) {
        var f, _i, _len;
        for (_i = 0, _len = reply.length; _i < _len; _i++) {
          f = reply[_i];
          filemap.push(f.name);
          filemap.push(f.md5);
          flist.push({
            name: f.name,
            md5: f.md5
          });
        }
        _this.redis.hmset.apply(_this.redis, filemap);
        return fn(null, flist);
      });
    };

    /**
     * Deletes a single file from the files hashmap.
     * @param {String} (filename) The filename to delete
     * @param {Function} (fn) The callback function
    */


    Files.prototype["delete"] = function(filename, fn) {
      var _this = this;
      return this.redis.del(this.files_prefix(), filename(function(err, reply) {
        return fn(null);
      }));
    };

    /**
     * Deletes all of the associated files from the current tag/branch.
     * @param {Function} (fn) The callback function
    */


    Files.prototype.delete_all = function(fn) {
      var _this = this;
      return this.redis.hkeys(this.files_prefix(), function(err, reply) {
        if (reply.length !== 0) {
          reply.unshift(_this.files_prefix());
          _this.redis.hdel.apply(_this.redis, reply);
        }
        return _this.delete_files(function(err, reply) {
          return fn(null);
        });
      });
    };

    /**
     * Sets up the file in the proper directory.
     * @param {Object} (file) The file to add to the current leaf
     * @param {Function} (fn) The callback function
     *
     * @example
     *
     *  f =
     *     location: "/tmp/54e05c292ef585094a12b20818b3f952"
     *      name: "master.ipa"
     * 
     *  setup_file(f, (err, reply) -> console.log reply)
     *
    */


    Files.prototype.setup_file = function(file, fn) {
      var dirloc, fe, fname, target_loc,
        _this = this;
      fe = this.file_extension(file.name);
      fname = "" + this.current + "." + fe;
      dirloc = [this.user, this.application, this.dtype, this.current].join('/');
      target_loc = [this.config.get('repository'), dirloc, fname].join('/');
      return mv(path.normalize(file.location), target_loc, function(err) {
        return filemd5(target_loc, function(err, data) {
          if (err) {
            _this.logger.error("Error setting up files for `" + target_loc + "`.");
          }
          return fn(err, {
            name: fname,
            md5: data
          });
        });
      });
    };

    /**
     * Deletes the files for the current leaf.
     * @param {Function} (fn) The callback function
    */


    Files.prototype.delete_files = function(fn) {
      var dirloc, target_dir;
      dirloc = [this.user, this.application, this.dtype, this.current].join('/');
      target_dir = [this.config.get('repository'), dirloc].join('/');
      return rimraf(target_dir, function(err) {
        return fn(null, true);
      });
    };

    /**
     * Returns the file extension.
     * @param {String} (filename) The name of the file
     * @return {String} The filename extension
    */


    Files.prototype.file_extension = function(filename) {
      var bname, ext;
      bname = path.basename(filename || '');
      if (/plist$/i.test(bname)) {
        return 'plist';
      } else if (/ipa$/i.test(bname)) {
        return 'ipa';
      } else if (/dsym.tar.gz$/i.test(bname)) {
        return 'dSYM.tar.gz';
      } else {
        ext = bname.split('.');
        ext.shift();
        return ext.join('.');
      }
    };

    return Files;

  })(RedisObject);

  module.exports = Files;

}).call(this);
