// Generated by CoffeeScript 1.4.0
(function() {
  var Application, ApplicationBranch, ApplicationTag, RedisObject, async, fs,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  async = require('async');

  RedisObject = require('./redis_object');

  ApplicationBranch = require('./application_branch');

  ApplicationTag = require('./application_tag');

  /**
   * A helper for working with applications of a particular user.
  */


  Application = (function(_super) {

    __extends(Application, _super);

    function Application(user, app) {
      this.user = user;
      if (app == null) {
        app = null;
      }
      this.delete_directories = __bind(this.delete_directories, this);
      this.setup_directories = __bind(this.setup_directories, this);
      this.tags = __bind(this.tags, this);
      this.branches = __bind(this.branches, this);
      this.delete_all = __bind(this.delete_all, this);
      this["delete"] = __bind(this["delete"], this);
      this.save = __bind(this.save, this);
      this.find = __bind(this.find, this);
      this.all = __bind(this.all, this);
      this.list = __bind(this.list, this);
      this.app_prefix = __bind(this.app_prefix, this);
      this.applist_prefix = __bind(this.applist_prefix, this);
      Application.__super__.constructor.call(this, app);
      this.object_name = 'application';
    }

    /**
     * The applications prefix for the specified user.
    */


    Application.prototype.applist_prefix = function() {
      return ''.concat(this.prefix(), 's', '::', this.user);
    };

    /**
     * The user-specific application prefix for a given application.
     * @param {String} (application) The name of the application
    */


    Application.prototype.app_prefix = function(application) {
      return [this.applist_prefix(), application].join('::');
    };

    /**
     * Returns the list of application names for a given user.
     * @param {Function} (fn) The callback function
    */


    Application.prototype.list = function(fn) {
      return this.redis.smembers(this.applist_prefix(), fn);
    };

    /**
     * Returns all of the user objects with the given filter.
     * @param {Object} (filter) The object keys you wish to return (null is all)
     * @param {Function} (fn) The callback function
    */


    Application.prototype.all = function(filter, fn) {
      var _this = this;
      if (filter == null) {
        filter = {};
      }
      if (typeof filter === "function") {
        fn = filter;
      }
      return this.list(function(err, applications) {
        if ((filter.name && Object.keys(filter).length === 1) || err) {
          return fn(err, applications);
        }
      });
    };

    /**
     * Searches for the redis objects that match the query.
     * @param {Object} (name) The name of the application to search for
     * @param {Function} (fn) The callback function
     TODO: Finish this function
    */


    Application.prototype.find = function(name, admin, fn) {
      var original,
        _this = this;
      if (admin == null) {
        admin = false;
      }
      if (typeof admin === "function") {
        fn = admin;
      }
      original = this.current;
      this.current = name;
      return this.list(function(err, applications) {
        var resp;
        if (err) {
          return fn(err, applications);
        }
        resp = {};
        resp.branches = [];
        resp.tags = [];
        if (__indexOf.call(applications, name) >= 0) {
          return _this.branches().list(function(err, reply) {
            resp.branches = reply;
            return _this.tags().list(function(err, reply) {
              resp.tags = reply;
              return fn(null, resp);
            });
          });
        } else {
          return fn(null, resp);
        }
      });
    };

    /**
     * Adds a new redis object of the current type to the database.
     * @param {Object} (obj) The object to add
     * @param {Function} (fn) The callback function
    */


    Application.prototype.save = function(fn) {
      var target,
        _this = this;
      if (!this.current) {
        return fn(null, false);
      }
      target = this.current;
      return this.all({
        name: true
      }, function(err, applications) {
        var stat_add, status;
        if (__indexOf.call(applications, target) >= 0) {
          return fn(null, _this.current);
        } else {
          stat_add = _this.redis.sadd(_this.applist_prefix(), target);
          status = stat_add ? null : {
            message: "Error saving application: `" + target + "`."
          };
          return _this.setup_directories(target, function(err, reply) {
            _this.current = target;
            return fn(status, target);
          });
        }
      });
    };

    /**
     * Deletes a redis object that matches the query.
     * @param {String} (application) The name of the application to delete
     * @param {Function} (fn) the callback function
    */


    Application.prototype["delete"] = function(application, fn) {
      var _this = this;
      this.current = application;
      this.redis.srem(this.applist_prefix(), application);
      return this.branches().delete_all(function(err, reply) {
        return _this.tags().delete_all(function(err, reply) {
          return _this.delete_directories(application, function(err, reply) {
            return fn(null, true);
          });
        });
      });
    };

    /**
     * Deletes every application for the user that currently exists.
     * @param {Function} (fn) The callback function
    */


    Application.prototype.delete_all = function(fn) {
      var _this = this;
      return this.list(function(err, applications) {
        return async.forEach(applications, _this["delete"], fn);
      });
    };

    /**
     * Returns the list of branches for the current application.
     * @return {Object} The ApplicationBranch object for the current application
    */


    Application.prototype.branches = function() {
      return new ApplicationBranch(this.user, this.current);
    };

    /**
     * Returns the list of tags for the current application.
     * @return {Object} The ApplicationTag object for the current application
    */


    Application.prototype.tags = function() {
      return new ApplicationTag(this.user, this.current);
    };

    /**
     * Creates the directories for the application.
     * @param {Object} (application) The application to create directories for
     * @param {Function} (fn) The callback function
    */


    Application.prototype.setup_directories = function(application, fn) {
      var dirloc, fulldir, msg,
        _this = this;
      dirloc = [this.user, application].join('/');
      fulldir = [this.config.get('repository'), dirloc].join('/');
      msg = "Error setting up directories for";
      return fs.mkdir(fulldir, function(err, made) {
        if (err) {
          _this.logger.error("" + msg + " `" + dirloc + "`.");
        }
        return fs.mkdir([fulldir, "tags"].join('/'), function(err, made) {
          if (err) {
            _this.logger.error("" + msg + " `" + dirloc + "/tags`.");
          }
          return fs.mkdir([fulldir, "branches"].join('/'), function(err, made) {
            if (err) {
              _this.logger.error("" + msg + " `" + dirloc + "/branches`.");
            }
            return fn(err, made);
          });
        });
      });
    };

    /**
     * Deletes the directories for the application.
     * @param {Object} (application) The application to create directories for
     * @param {Function} (fn) The callback function
    */


    Application.prototype.delete_directories = function(application, fn) {
      var dirloc, fulldir, msg,
        _this = this;
      dirloc = [this.user, application].join('/');
      fulldir = [this.config.get('repository'), dirloc].join('/');
      msg = "Error removing directories for";
      return fs.rmdir(fulldir, function(err) {
        if (err) {
          _this.logger.error("" + msg + " `" + dirloc + "`.");
        }
        return fs.rmdir([fulldir, "tags"].join('/'), function(err) {
          if (err) {
            _this.logger.error("" + msg + " `" + dirloc + "/tags`.");
          }
          return fs.rmdir([fulldir, "branches"].join('/'), function(err) {
            if (err) {
              _this.logger.error("" + msg + " `" + dirloc + "/branches`.");
            }
            return fn(null, true);
          });
        });
      });
    };

    return Application;

  })(RedisObject);

  module.exports = Application;

}).call(this);
