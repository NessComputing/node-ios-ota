// Generated by CoffeeScript 1.3.3
(function() {
  var Config, Logger, RedisUtility, RedisUtils, Singleton, async, redis,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Singleton = require('./singleton');

  Config = require('./config');

  Logger = require('./logger');

  redis = require('redis');

  async = require('async');

  /**
   * Redis utility wrapper for the iOS-ota service.
  */


  RedisUtility = (function() {

    function RedisUtility(port, host, options, prefix) {
      this.prefix = prefix != null ? prefix : "ios-ota-";
      this.modify_redis = __bind(this.modify_redis, this);

      this.redis = redis.createClient(port, host, options);
      this.modify_redis();
      return this.redis;
    }

    RedisUtility.prototype.modify_redis = function() {
      /**
       * Returns the key, prefixed.
       * @param {String} (key) The key to prefix
       * @return {String} The key prefixed with the class prefix
      */

      var _this = this;
      this.redis.prefix = function(key) {
        return ''.concat(_this.prefix, key);
      };
      /**
       * Returns the list of users.
       * @param {Function} (fn) The callback function
      */

      this.redis.get_users = function(fn) {
        return _this.redis.get(_this.redis.prefix('users'), fn);
      };
      /**
       * Returns the full user hash.
       * @param {String} (username) The username to retrieve all keys for
       * @param {Function} (fn) The callback function
      */

      this.redis.get_user = function(username, fn) {
        return _this.redis.hgetall(''.concat(_this.redis.prefix('user'), '-', username), fn);
      };
      /**
       * Returns the user's encrypted secret.
       * @param {String} (username) The username to retrieve the secret for
       * @param {Function} (fn) The callback function
      */

      this.redis.get_user_secret = function(username, fn) {
        return _this.redis.hget(''.concat(_this.redis.prefix('user'), '-', username), 'secret', fn);
      };
      /**
       * Adds or updates a user with the given user object.
       * @param {Object} (user) The user object hash to create or update
       * @param {Function} (fn) The callback function
      */

      return this.redis.add_or_update_user = function(user, fn) {
        var make_tuple, update_user;
        make_tuple = function(key, func) {
          var err, reply;
          err = false;
          reply = [''.concat(_this.redis.prefix('user'), '-', user.username), key, user[key]];
          return func(err, reply);
        };
        update_user = function(tuple, func) {
          return _this.redis.hset(tuple, function(err, reply) {
            console.log(reply);
            return func(err, reply);
          });
        };
        return async.map(Object.keys(user), make_tuple, function(err, reply) {
          if (err) {
            reply = "Error mapping user-object tuple.";
            return fn(err, reply);
          }
          return async.forEach(reply, update_user, function(err, reply) {});
        });
      };
    };

    return RedisUtility;

  })();

  /**
   * Redis utility wrapper that acts as a singleton.
  */


  RedisUtils = (function(_super) {

    __extends(RedisUtils, _super);

    function RedisUtils() {
      var _this = this;
      this.config = Config.get();
      this.logger = Logger.get();
      this.redis = new RedisUtility(this.config.get("redis_port"), this.config.get("redis_host"));
      this.redis.on("error", function(err) {
        _this.logger.error(''.concat("Error connecting to redis://", _this.config.get('redis_host'), ':', _this.config.get('redis_port')));
        return process.exit(1);
      });
      return this.redis;
    }

    return RedisUtils;

  })(Singleton);

  module.exports = RedisUtils;

}).call(this);
