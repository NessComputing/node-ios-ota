// Generated by CoffeeScript 1.3.3
(function() {
  var Config, Logger, RedisSingleton, RedisUtility, Singleton, bcrypt, merge, redis,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Singleton = require('./singleton');

  Config = require('./config');

  Logger = require('./logger');

  redis = require('redis');

  merge = require('merge-recursive');

  bcrypt = require('bcrypt');

  /**
   * Redis utility wrapper for the iOS-ota service.
  */


  RedisUtility = (function() {

    function RedisUtility(port, host, options) {
      this.modify_redis = __bind(this.modify_redis, this);
      this.prefix = "ios-ota-";
      this.redis = redis.createClient(port, host, options);
      this.modify_redis();
      return this.redis;
    }

    RedisUtility.prototype.modify_redis = function() {
      /**
       * Returns the key, prefixed.
       * @param {String} (key) The key to prefix
       * @return {String} The key prefixed with the class prefix
      */

      var _this = this;
      this.redis.prefix = function(key) {
        return ''.concat(_this.prefix, key);
      };
      /**
       * Returns the list of users.
       * @param {Function} (fn) The callback function
      */

      this.redis.get_users = function(fn) {
        return _this.redis.smembers(_this.redis.prefix('users'), fn);
      };
      /**
       * Returns the full user hash.
       * @param {String} (username) The username to retrieve all keys for
       * @param {Function} (fn) The callback function
      */

      this.redis.get_user = function(username, fn) {
        return _this.redis.hgetall(''.concat(_this.redis.prefix('user'), '-', username), fn);
      };
      /**
       * Returns the user's encrypted secret.
       * @param {String} (username) The username to retrieve the secret for
       * @param {Function} (fn) The callback function
      */

      this.redis.get_user_secret = function(username, fn) {
        return _this.redis.hget(''.concat(_this.redis.prefix('user'), '-', username), 'secret', fn);
      };
      /**
       * Attempts to validate the login.
       * @param {Object} (user) The user login object user/secret tuple
       * @param {Function} (fn) The callback function
      */

      this.redis.check_login = function(user, fn) {
        return _this.redis.get_user(user.username, function(err, reply) {
          return bcrypt.compare(user.secret, reply.secret, function(err, res) {
            return fn(err, res);
          });
        });
      };
      /**
       * Adds or updates a user with the given user object.
       * @param {Object} (user) The user object hash to create or update
       * @param {Function} (fn) The callback function
      */

      this.redis.add_or_update_user = function(user, fn) {
        var user_prefix;
        user_prefix = ''.concat(_this.redis.prefix('user'), '-', user.username);
        return _this.redis.get_user(user.username, function(err, current_user) {
          var hm_success, reply, sadd_success, success;
          if (err) {
            reply = "Error retrieving user from db.";
            return fn(err, reply);
          }
          if (!current_user === null) {
            user = merge.recursive(current_user, user);
          }
          hm_success = _this.redis.hmset(user_prefix, user);
          sadd_success = _this.redis.sadd(_this.redis.prefix('users'), user.username);
          success = hm_success && sadd_success;
          return fn(!success, user);
        });
      };
      /**
       * Returns the list of applications for a specified user.
       * @param {String} (username) The username to retrieve applications for
       * @param {Function} (fn) The callback function
      */

      this.redis.get_applications = function(username, fn) {
        var app_prefix;
        app_prefix = ''.concat(_this.redis.prefix('applications'), '-', username);
        return _this.redis.smembers(app_prefix, function(err, apps) {
          console.log(err);
          return console.log(apps);
        });
      };
      /**
       * Removes the given user object.
       * @param {String} (username) The username to remove
       * @param {Function} (fn) The callback function
      */

      return this.redis.remove_user = function(username, fn) {
        var user_prefix;
        user_prefix = ''.concat(_this.redis.prefix('user'), '-', username);
        return _this.redis.del(user_prefix, function(err, res) {
          return console.log(err, res);
        });
      };
    };

    return RedisUtility;

  })();

  /**
   * Redis utility wrapper that acts as a singleton.
  */


  RedisSingleton = (function(_super) {

    __extends(RedisSingleton, _super);

    function RedisSingleton() {
      var _this = this;
      this.config = Config.get();
      this.logger = Logger.get();
      this.redis = new redis.createClient(this.config.get("redis_port"), this.config.get("redis_host"));
      this.redis.on("error", function(err) {
        _this.logger.error(''.concat("Error connecting to redis://", _this.config.get('redis_host'), ':', _this.config.get('redis_port')));
        return process.exit(1);
      });
      return this.redis;
    }

    return RedisSingleton;

  })(Singleton);

  module.exports = RedisSingleton;

}).call(this);
