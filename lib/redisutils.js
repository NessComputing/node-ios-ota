// Generated by CoffeeScript 1.3.3
(function() {
  var Config, Logger, RedisUtility, RedisUtils, Singleton, async, redis,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Singleton = require('./singleton');

  Config = require('./config');

  Logger = require('./logger');

  redis = require('redis');

  async = require('async');

  /**
   * Redis utility wrapper for the iOS-ota service.
  */


  RedisUtility = (function() {

    function RedisUtility(port, host, options, prefix) {
      this.prefix = prefix != null ? prefix : "ios-ota-";
      this.modify_redis = __bind(this.modify_redis, this);

      this.redis = redis.createClient(port, host, options);
      this.modify_redis();
      return this.redis;
    }

    RedisUtility.prototype.modify_redis = function() {
      var _this = this;
      this.redis.prefix = function(k) {
        return ''.concat(_this.prefix, k);
      };
      this.redis.get_users = function(fn) {
        return _this.redis.get(_this.redis.prefix('users'), fn);
      };
      this.redis.get_user = function(username, fn) {
        return _this.redis.hgetall(''.concat(_this.redis.prefix('user'), '-', username), fn);
      };
      this.redis.get_user_secret = function(username, fn) {
        return _this.redis.hget(''.concat(_this.redis.prefix('user'), '-', username), 'secret', fn);
      };
      return this.redis.add_or_update_user = function(user, fn) {
        return async.map(Object.keys(user), function(key, func1) {
          var err, reply;
          err = false;
          reply = [''.concat(_this.redis.prefix('user'), '-', user.username), key, user[key]];
          return func1(err, reply);
        }, function(err, results) {
          return console.log(err);
        });
      };
    };

    return RedisUtility;

  })();

  /**
   * Redis utility wrapper that acts as a singleton.
  */


  RedisUtils = (function(_super) {

    __extends(RedisUtils, _super);

    function RedisUtils() {
      var _this = this;
      this.config = Config.get();
      this.logger = Logger.get();
      this.redis = new RedisUtility(this.config.get("redis_port"), this.config.get("redis_host"));
      this.redis.on("error", function(err) {
        _this.logger.error(''.concat("Error connecting to redis://", _this.config.get('redis_host'), ':', _this.config.get('redis_port')));
        return process.exit(1);
      });
      return this.redis;
    }

    return RedisUtils;

  })(Singleton);

  module.exports = RedisUtils;

}).call(this);
