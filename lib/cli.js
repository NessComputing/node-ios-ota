// Generated by CoffeeScript 1.4.0
(function() {
  var CLI, config, logger, optimist,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  optimist = require('optimist');

  logger = require('./logger');

  config = require('nconf');

  require('pkginfo')(module, 'name');

  /*
  The command line interface class.
  */


  CLI = (function() {

    function CLI() {
      this.set_defaults = __bind(this.set_defaults, this);
      this.set_file = __bind(this.set_file, this);
      this.set_env = __bind(this.set_env, this);
      this.set_argv = __bind(this.set_argv, this);
      this.set_overrides = __bind(this.set_overrides, this);
      this.configure = __bind(this.configure, this);      this.argv = optimist.usage("Usage: " + exports.name).alias('c', 'config').describe('c', 'The configuration file to use')["default"]('c', "/etc/ios-ota.json").alias('a', 'admin_secret').describe('a', 'The secret for the admin user')["default"]('a', "admin").alias('r', 'repository').describe('r', 'The location of the iOS ota repository')["default"]('r', "/opt/ios-ota").alias('H', 'redis_host').describe('H', 'The redis host to connect')["default"]('H', "127.0.0.1").alias('P', 'redis_port').describe('P', 'The redis port to connect')["default"]('P', "6379").alias('l', 'loglevel').describe('l', 'Set the log level (debug, info, warn, error, fatal)')["default"]('l', 'warn').alias('p', 'port').describe('p', 'Run the api server on the given port')["default"]('p', 3000).alias('R', 'archive').describe('R', 'Enable automatic archiving based on the bundle-version')["default"]('R', true).alias('h', 'help').describe('h', 'Shows this message')["default"]('h', false).argv;
      this.configure();
      if (config.get('help') && config.get('help').toString() === "true") {
        optimist.showHelp();
        process.exit(0);
      }
    }

    CLI.prototype.configure = function() {
      this.set_overrides();
      this.set_argv();
      this.set_env();
      this.set_file();
      return this.set_defaults();
    };

    CLI.prototype.set_overrides = function() {
      return config.overrides({});
    };

    CLI.prototype.set_argv = function() {
      return config.add('optimist_args', {
        type: 'literal',
        store: this.argv
      });
    };

    CLI.prototype.set_env = function() {
      return config.env({
        whitelist: []
      });
    };

    CLI.prototype.set_file = function() {
      return config.file({
        file: config.get('c')
      });
    };

    CLI.prototype.set_defaults = function() {
      return config.defaults({});
    };

    return CLI;

  })();

  module.exports = CLI;

}).call(this);
